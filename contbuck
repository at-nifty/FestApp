<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>コントロール画面</title>
  <style>
    body { font-family: sans-serif; padding: 20px; }
    .section { margin-bottom: 30px; }
    .preview-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 10px; }
    video, iframe { width: 100%; height: 200px; background: #000; }
    .control-panel { margin-top: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 8px; }
    label { display: block; margin-top: 10px; }
    select, input[type="text"], input[type="file"] { width: 100%; }
  </style>
</head>
<body>
  <h1>コントロール画面</h1>

  <div class="section">
    <h2>プレビュー</h2>
    <h3>プロジェクター（Main/Sub）</h3>
    <div class="preview-grid">
      <iframe id="mainProjectorPreview"></iframe>
      <iframe id="subProjectorPreview"></iframe>
    </div>
    <h3>モニター</h3>
    <div class="preview-grid">
      <iframe id="monitorPreview0"></iframe>
      <iframe id="monitorPreview1"></iframe>
      <iframe id="monitorPreview2"></iframe>
      <iframe id="monitorPreview3"></iframe>
      <iframe id="monitorPreview4"></iframe>
      <iframe id="monitorPreview5"></iframe>
      <iframe id="monitorPreview6"></iframe>
      <iframe id="monitorPreview7"></iframe>
    </div>
    <h3>カメラ映像</h3>
    <div class="preview-grid">
      <video id="cameraPreview0" autoplay></video>
      <video id="cameraPreview1" autoplay></video>
      <video id="cameraPreview2" autoplay></video>
      <video id="cameraPreview3" autoplay></video>
      <video id="cameraPreview4" autoplay></video>
      <video id="cameraPreview5" autoplay></video>
      <video id="cameraPreview6" autoplay></video>
      <video id="cameraPreview7" autoplay></video>
    </div>
  </div>

  <div class="section">
    <h2>表示内容の変更</h2>
    <div class="control-panel">
      <label for="target">対象画面</label>
      <select id="target">
        <option value="mainProjector">メインプロジェクター</option>
        <option value="subProjector">サブプロジェクター</option>
        <option value="monitor0">モニター0</option>
        <option value="monitor1">モニター1</option>
        <option value="monitor2">モニター2</option>
        <option value="monitor3">モニター3</option>
        <option value="monitor4">モニター4</option>
        <option value="monitor5">モニター5</option>
        <option value="monitor6">モニター6</option>
        <option value="monitor7">モニター7</option>
      </select>

      <label for="textContent">案内/歌詞表示テキスト</label>
      <input type="text" id="textContent" placeholder="ここにテキストを入力" />

      <label for="lyricsFile">歌詞ファイル（.txt）</label>
      <input type="file" id="lyricsFile" accept=".txt" />

      <label for="videoURL">動画URL</label>
      <input type="text" id="videoURL" placeholder="https://example.com/video.mp4" />

      <label for="videoFile">動画ファイル（mp4）</label>
      <input type="file" id="videoFile" accept="video/mp4" />

      <label for="cameraNumber">映すカメラ番号（0-7）</label>
      <select id="cameraNumber">
        <option value="">--選択--</option>
        <option value="0">カメラ0</option>
        <option value="1">カメラ1</option>
        <option value="2">カメラ2</option>
        <option value="3">カメラ3</option>
        <option value="4">カメラ4</option>
        <option value="5">カメラ5</option>
        <option value="6">カメラ6</option>
        <option value="7">カメラ7</option>
      </select>

      <button onclick="applyContent()">適用</button>
    </div>
  </div>

  <script>
    function applyContent() {
      const target = document.getElementById("target").value;
      const text = document.getElementById("textContent").value;
      const lyricsFile = document.getElementById("lyricsFile").files[0];
      const videoURL = document.getElementById("videoURL").value;
      const videoFile = document.getElementById("videoFile").files[0];
      const cameraNum = document.getElementById("cameraNumber").value;

      const targetFrame = document.getElementById(`${target}Preview`);
      if (!targetFrame) return alert("対象が不正です");

      if (text) {
        targetFrame.srcdoc = `<div style='font-size:3em;text-align:center;'>${text}</div>`;
        return;
      }

      if (lyricsFile) {
        const reader = new FileReader();
        reader.onload = () => {
          const lines = reader.result.split('\n').filter(line => line.trim() !== "");
          let html = `<style>
            body { background: black; margin: 0; overflow: hidden; }
            .lyric-su { position: absolute; top: 10px; left: 10px; font-size: 2em; color: white; }
            .lyric-sd { position: absolute; bottom: 10px; right: 10px; font-size: 2em; color: white; }
            .lyric-f  { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 3em; color: white; text-align: center; }
          </style><body>`;

          for (const line of lines) {
            if (line.startsWith("SU ")) {
              html += `<div class='lyric-su'>${line.substring(3).trim()}</div>`;
            } else if (line.startsWith("SD ")) {
              html += `<div class='lyric-sd'>${line.substring(3).trim()}</div>`;
            } else if (line.startsWith("F ")) {
              html += `<div class='lyric-f'>${line.substring(2).trim()}</div>`;
            } else if (line.trim() === "Clear") {
              html += ""; // Clear = 表示なし
            } else {
              html += `<div style='color:white; text-align:center;'>${line}</div>`; // fallback表示
            }
          }

          html += "</body>";
          targetFrame.srcdoc = html;
        };
        reader.readAsText(lyricsFile);
        return;
      }

      if (videoURL) {
        targetFrame.src = videoURL;
        return;
      }

      if (videoFile) {
        const url = URL.createObjectURL(videoFile);
        targetFrame.src = url;
        return;
      }

      if (cameraNum !== "") {
        const stream = document.getElementById(`cameraPreview${cameraNum}`).srcObject;
        const camId = `liveCam${cameraNum}`;
        targetFrame.srcdoc = `<video autoplay playsinline id="${camId}" width="100%" height="100%"></video>`;
        const interval = setInterval(() => {
          const video = targetFrame.contentDocument && targetFrame.contentDocument.getElementById(camId);
          if (video) {
            video.srcObject = stream;
            clearInterval(interval);
          }
        }, 100);
      }
    }

    function setupCameraPreview(index) {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
          document.getElementById(`cameraPreview${index}`).srcObject = stream;
        })
        .catch(err => console.error("Camera access error:", err));
    }

    for (let i = 0; i < 8; i++) {
      setupCameraPreview(i);
    }
  </script>
</body>
</html>